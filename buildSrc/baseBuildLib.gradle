//plugins {
//    id "com.jfrog.bintray" version "1.7.3"
//}
apply from: "$rootDir/buildSrc/config.gradle"
apply from: "$rootDir/buildSrc/buildUtils.gradle"

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'

android {
    signingConfigs {
        release {
            def propsFile = new File("$rootDir/buildSrc/keystore.properties")
            def props = new Properties()
            props.load(new FileInputStream(propsFile))

            storeFile file("${System.getenv('ANDROID_HOME')}/release.keystore")
            keyAlias props['alias']
            storePassword props['signingPassword']
            keyPassword props['signingPassword']
        }
    }

    compileSdkVersion rootProject.ext.compileSdkVersion
//    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        def module = project.getModuleInfoByPath(project.path)
        versionCode project.getModuleVersionCode(module)
        versionName project.getModuleVersionName(module)
        setProperty("archivesBaseName", "${project.name}-${versionName}")

        vectorDrawables.useSupportLibrary = true

        consumerProguardFiles "consumer-rules.pro"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility sourceCompatibilityVersion
        targetCompatibility sourceCompatibilityVersion
    }

    lint {
        checkReleaseBuilds false
        abortOnError false
    }

    sourceSets {
        main {
            java.srcDirs += 'src/main/kotlin/'
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

//        productFlavors.all { flavor ->
//        }
    }

    dexOptions {
        javaMaxHeapSize "4G"
    }
    kotlinOptions {
        jvmTarget = jvmVersion
    }

    libraryVariants.all { variant ->
        variant.outputs.all { output ->
            def module = project.getModuleInfoByPath(project.path)
            def baseName = "${project.name}-${variant.name}-${project.getModuleVersionName(module)}"
            def outputFileName = "${baseName}.aar"
            println "Setting aar name to $outputFileName for variant ${variant.name}"
            output.outputFileName = outputFileName
        }
    }
}

dependencies {

    // libs/*.jar
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])

    // Jetbrains annotations
    api "org.jetbrains:annotations:$jetbrainsAnnotationsVersion"

    testImplementation "androidx.test:core:$testCoreVersion"
    testImplementation "androidx.test.ext:junit:$jUnitExtVersion"
    testImplementation "androidx.test:rules:$testCoreVersion"
    testImplementation "junit:junit:$jUnitVersion"
    testImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    testImplementation "androidx.test:runner:$testCoreVersion"
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'

    androidTestImplementation "androidx.test:core:$testCoreVersion"
    androidTestImplementation "androidx.test.ext:junit:$jUnitExtVersion"
    androidTestImplementation "androidx.test:rules:$testCoreVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test:runner:$testCoreVersion"
    androidTestImplementation 'org.jetbrains.kotlin:kotlin-test'
    androidTestImplementation 'org.jetbrains.kotlin:kotlin-test-junit'
}

configurations {
    javadocDependencies
}

//apply from: "$rootDir/buildSrc/deploy.gradle"