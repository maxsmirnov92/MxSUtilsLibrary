buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintrayGradleVersion"
        classpath "com.github.dcendents:android-maven-gradle-plugin:$mavenGradleVersion"
    }
}

//plugins {
//    id "com.jfrog.bintray" version "1.7.3"
//}

repositories {
    jcenter()
}

apply plugin: 'com.android.library'

//apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven'
apply plugin: 'maven-publish'

def siteUrl = 'https://github.com/maxsmirnov92/MxSUtilsLibrary'
def gitUrl = 'https://github.com/maxsmirnov92/MxSUtilsLibrary.git'

//def releaseDir = "${buildDir}/release"
def localReleaseDest = project.hasProperty("LOCAL_REPO") ? "${rootProject.projectDir}/${project.LOCAL_REPO}" : "${rootProject.buildDir}/release/repo"

android {

    signingConfigs {
        release {
            keyAlias 'maxsmirnov'
            storeFile file('~/.android/release-key.keystore')
        }
    }

    compileSdkVersion sdkVersion
    buildToolsVersion buildToolsVersion_

    sourceCompatibility = sourceCompatibilityVersion
    targetCompatibility = sourceCompatibilityVersion

    defaultConfig {
        minSdkVersion minSdkVersion_
        targetSdkVersion sdkVersion
        versionCode 1
        versionName project.commonUtilsVersion
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        // Don't abort if Lint finds an error, otherwise the Jenkins build
        // will be marked as failed, and Jenkins won't analyse the Lint output
        abortOnError false
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}


configurations {
    javadocDependencies
}

//task javadoc(type: Javadoc) {
//    source = android.sourceSets.main.java.srcDirs
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//}

//task javaDocsJar(type: Jar, dependsOn: javaDocs) {
//    classifier = 'javadoc'
//    from javaDocs.destinationDir
//}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
//    archives javadocJar
    archives sourcesJar
}

dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    api "com.android.support:support-annotations:$appCompatVersion"
    api "com.android.support:palette-v7:$appCompatVersion"
    api "com.android.support:design:$appCompatVersion"
    javadocDependencies "com.android.support:appcompat-v7:$appCompatVersion"
    javadocDependencies "com.android.support:support-annotations:$appCompatVersion"
    api "commons-net:commons-net:$commonsNetVersion"
    api "com.google.code.gson:gson:$gsonVersion"
    testImplementation "junit:junit:$jUnitVersion"
    androidTestImplementation "com.android.support:support-annotations:$appCompatVersion"
    androidTestImplementation "com.android.support.test:runner:$testRunnerVersion"
    androidTestImplementation "com.android.support.test:rules:$testRunnerVersion"
    androidTestImplementation("com.android.support.test.espresso:espresso-core:$espressoVersion", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

uploadArchives {
    repositories.mavenDeployer {
        pom.groupId = project.groupIdName
        pom.artifactId = project.archivesBaseName
        pom.version = project.commonUtilsVersion
        repository(url: "file://${localReleaseDest}")
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
    publish = true //[Default: false] Whether version should be auto published after an upload
    override = false //[Default: false] Whether to override version artifacts already published
    publications = ['artifactPublication']
    pkg {
        repo = 'maven'
        name = rootProject.name /*+ File.separator + project.name*/
        userOrg = user
        websiteUrl = siteUrl
        licenses = ['Apache-2.0']
        vcsUrl = gitUrl
        version {
            name = project.commonUtilsVersion
        }
        publicDownloadNumbers = true
    }
}

publishing {
    publications {
        artifactPublication(MavenPublication) {

            groupId = project.groupIdName
            artifactId = project.archivesBaseName
            version = project.commonUtilsVersion
            artifact "${project.buildDir}/outputs/aar/${project.archivesBaseName}-release.aar"
            artifact sourcesJar
//            artifact javadocsJar

//            android.buildTypes.all { variant ->
//                // Dynamically creating publications name
//                "${variant.name}artifactPublication"(MavenPublication) {
//
//                    def manifest = new XmlSlurper().parse(project.android.sourceSets.main.manifest.srcFile);
//                    def libVersion = manifest['@android:versionName'].text()
//                    def artifactName = project.getName()
//
//                    // Artifact properties
//                    groupId = project.groupIdName
//                    artifactId = project.archivesBaseName
//                    version = libVersion
//                    artifactId variant.name == 'debug' ? artifactName + '-dev' : artifactName
//
//                    // Tell maven to prepare the generated "*.aar" file for publishing
//                    artifact("$buildDir/outputs/aar/${project.getName()}-${variant.name}.aar")
////                    artifact "${project.buildDir}/outputs/aar/${archivesBaseName}-release.aar"
//
//                    artifact sourcesJar
////            artifact javadocsJar
//
//                    //The publication doesn't know about our dependencies, so we have to manually add them to the pom
//                    pom.withXml {
//                        //Creating additional node for dependencies
//                        def dependenciesNode = asNode().appendNode('dependencies')
//
//                        //Defining configuration names from which dependencies will be taken (debugCompile or releaseCompile and compile)
//                        def configurationNames = ["${variant.name}Compile", 'compile']
//
//                        configurationNames.each { configurationName ->
//                            configurations[configurationName].allDependencies.each {
//                                if (it.group != null && it.name != null) {
//                                    def dependencyNode = dependenciesNode.appendNode('dependency')
//                                    dependencyNode.appendNode('groupId', it.group)
//                                    dependencyNode.appendNode('artifactId', it.name)
//                                    dependencyNode.appendNode('version', it.version)
//
//                                    //If there are any exclusions in dependency
//                                    if (it.excludeRules.size() > 0) {
//                                        def exclusionsNode = dependencyNode.appendNode('exclusions')
//                                        it.excludeRules.each { rule ->
//                                            def exclusionNode = exclusionsNode.appendNode('exclusion')
//                                            exclusionNode.appendNode('groupId', rule.group)
//                                            exclusionNode.appendNode('artifactId', rule.module)
//                                        }
//                                    }
//                                }
//                            }
//                        }

//            pom.withXml {
//                asNode().dependencies.'*'.findAll() {
//                    it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
//                        dep.name == it.artifactId.text()
//                    }
//                }.each() {
//                    it.scope*.value = 'compile'
//                }
//            }

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.api.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included.
                    if (it.group != null && it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

//        }
//    }
//}

//install {
//    repositories.mavenInstaller {
//        pom {
//            project {
//                packaging 'aar'
//                name project.name
//                url siteUrl
//                licenses {
//                    license {
//                        name 'The Apache Software License, Version 2.0'
//                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//                    }
//                }
//                developers {
//                    developer {
//                        id 'maxsmirnov'
//                        name 'Max Smirnov'
//                        email 'max.smirnov92@yandex.ru'
//                    }
//                }
//                scm {
//                    connection 'https://github.com/bintray/bintray-examples.git'
//                    developerConnection 'https://github.com/bintray/bintray-examples.git'
//                    url siteUrl
//                }
//            }
//        }
//    }
//}

